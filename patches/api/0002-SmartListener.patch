From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Indhi Rousseau <contact@thekinrar.fr>
Date: Sat, 25 Apr 2020 01:36:28 +0200
Subject: [PATCH] SmartListener


diff --git a/src/main/java/org/bukkit/event/SmartListener.java b/src/main/java/org/bukkit/event/SmartListener.java
new file mode 100644
index 0000000000000000000000000000000000000000..1c87f7ca98f58776b38b7b1e02bbaee10c5c74f4
--- /dev/null
+++ b/src/main/java/org/bukkit/event/SmartListener.java
@@ -0,0 +1,19 @@
+package org.bukkit.event;
+
+import org.bukkit.event.filters.EventFilter;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public abstract class SmartListener implements Listener {
+
+    private EventFilter filter = null;
+
+    public @NotNull SmartListener setFilter(@Nullable EventFilter filter) {
+        this.filter = filter;
+        return this;
+    }
+
+    public boolean shouldHandle(@NotNull Event event) {
+        return filter == null || filter.test(event);
+    }
+}
diff --git a/src/main/java/org/bukkit/event/entity/EntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityEvent.java
index e3a9e32933fe84644f7458d2e0b8b09d3eacb21c..164c41b484734e5cbd47035d877c6ac2d02b5fba 100644
--- a/src/main/java/org/bukkit/event/entity/EntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityEvent.java
@@ -3,15 +3,22 @@ package org.bukkit.event.entity;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
 import org.bukkit.event.Event;
+import org.bukkit.event.world.LocalEvent;
 import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents an Entity-related event
  */
-public abstract class EntityEvent extends Event {
+public abstract class EntityEvent extends LocalEvent {
     protected Entity entity;
 
     public EntityEvent(@NotNull final Entity what) {
+        super(what != null ? what.getLocation() : null);
+        entity = what;
+    }
+
+    public EntityEvent(@NotNull final Entity what, boolean async) {
+        super(what.getLocation(), async);
         entity = what;
     }
 
diff --git a/src/main/java/org/bukkit/event/filters/EventFilter.java b/src/main/java/org/bukkit/event/filters/EventFilter.java
new file mode 100644
index 0000000000000000000000000000000000000000..e4b7fbf9dc44f66148fb3b74a99daf9db826f546
--- /dev/null
+++ b/src/main/java/org/bukkit/event/filters/EventFilter.java
@@ -0,0 +1,103 @@
+package org.bukkit.event.filters;
+
+import org.bukkit.event.Event;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Arrays;
+import java.util.function.Function;
+
+public interface EventFilter {
+
+    EventFilter ALL = event -> true;
+    EventFilter NONE = event -> false;
+
+    @SafeVarargs
+    @NotNull
+    static <T> EventFilter and(@NotNull Function<T, EventFilter> function, @NotNull T... args) {
+        return new EventFilter.AndFilter(Arrays.stream(args).map(function).toArray(EventFilter[]::new));
+    }
+
+    @SafeVarargs
+    @NotNull
+    static <T> EventFilter or(@NotNull Function<T, EventFilter> function, @NotNull T... args) {
+        return new EventFilter.OrFilter(Arrays.stream(args).map(function).toArray(EventFilter[]::new));
+    }
+
+    @NotNull
+    default EventFilter and(@NotNull EventFilter other) {
+        return new AndFilter(this, other);
+    }
+
+    @NotNull
+    default EventFilter negate() {
+        return new NegateFilter(this);
+    }
+
+    @NotNull
+    default EventFilter or(@NotNull EventFilter other) {
+        return new OrFilter(this, other);
+    }
+
+    boolean test(@NotNull Event event);
+
+    class AndFilter implements EventFilter {
+
+        private EventFilter[] filters;
+
+        private AndFilter(@NotNull EventFilter... filters) {
+            this.filters = filters;
+        }
+
+        @Override
+        public @NotNull EventFilter and(@NotNull EventFilter other) {
+            EventFilter[] array = Arrays.copyOf(filters, filters.length + 1);
+            array[array.length - 1] = other;
+            return new AndFilter(array);
+        }
+
+        @Override
+        public boolean test(@NotNull Event event) {
+            return Arrays.stream(filters).allMatch(eventFilter -> eventFilter.test(event));
+        }
+    }
+
+    class NegateFilter implements EventFilter {
+
+        private EventFilter filter;
+
+        private NegateFilter(@NotNull EventFilter filter) {
+            this.filter = filter;
+        }
+
+        @Override
+        public @NotNull EventFilter negate() {
+            return filter;
+        }
+
+        @Override
+        public boolean test(@NotNull Event event) {
+            return !filter.test(event);
+        }
+    }
+
+    class OrFilter implements EventFilter {
+
+        private EventFilter[] filters;
+
+        private OrFilter(@NotNull EventFilter... filters) {
+            this.filters = filters;
+        }
+
+        @Override
+        public @NotNull EventFilter or(@NotNull EventFilter other) {
+            EventFilter[] array = Arrays.copyOf(filters, filters.length + 1);
+            array[array.length - 1] = other;
+            return new OrFilter(array);
+        }
+
+        @Override
+        public boolean test(@NotNull Event event) {
+            return Arrays.stream(filters).anyMatch(eventFilter -> eventFilter.test(event));
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/event/filters/PlayerFilter.java b/src/main/java/org/bukkit/event/filters/PlayerFilter.java
new file mode 100644
index 0000000000000000000000000000000000000000..0738dd4cf51d68c044ca4455ffc86755c2d8fda8
--- /dev/null
+++ b/src/main/java/org/bukkit/event/filters/PlayerFilter.java
@@ -0,0 +1,32 @@
+package org.bukkit.event.filters;
+
+import org.bukkit.entity.Player;
+import org.bukkit.event.Event;
+import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Objects;
+
+public class PlayerFilter implements EventFilter {
+
+    private final Player player;
+
+    public PlayerFilter(@NotNull Player player) {
+        this.player = Objects.requireNonNull(player);
+    }
+
+    @NotNull
+    public static EventFilter and(@NotNull Player... players) {
+        return EventFilter.and(PlayerFilter::new, players);
+    }
+
+    @NotNull
+    public static EventFilter or(@NotNull Player... players) {
+        return EventFilter.or(PlayerFilter::new, players);
+    }
+
+    @Override
+    public boolean test(@NotNull Event event) {
+        return event instanceof PlayerEvent && player.equals(((PlayerEvent) event).getPlayer());
+    }
+}
diff --git a/src/main/java/org/bukkit/event/filters/WorldFilter.java b/src/main/java/org/bukkit/event/filters/WorldFilter.java
new file mode 100644
index 0000000000000000000000000000000000000000..c34f775c06327a0810ba629a8e7623a52aa33eac
--- /dev/null
+++ b/src/main/java/org/bukkit/event/filters/WorldFilter.java
@@ -0,0 +1,33 @@
+package org.bukkit.event.filters;
+
+import org.bukkit.World;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Event;
+import org.bukkit.event.world.WorldEvent;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Objects;
+
+public class WorldFilter implements EventFilter {
+
+    private final World world;
+
+    public WorldFilter(@NotNull World world) {
+        this.world = Objects.requireNonNull(world);
+    }
+
+    @NotNull
+    public static EventFilter and(@NotNull World... worlds) {
+        return EventFilter.and(WorldFilter::new, worlds);
+    }
+
+    @NotNull
+    public static EventFilter or(@NotNull World... worlds) {
+        return EventFilter.or(WorldFilter::new, worlds);
+    }
+
+    @Override
+    public boolean test(@NotNull Event event) {
+        return event instanceof WorldEvent && world.equals(((WorldEvent) event).getWorld());
+    }
+}
diff --git a/src/main/java/org/bukkit/event/player/PlayerEvent.java b/src/main/java/org/bukkit/event/player/PlayerEvent.java
index f6d3b817de3001f04ea4554c7c39a1290af3fd6d..45ed944fe5b494950e3659e8e960dc7e767fb050 100644
--- a/src/main/java/org/bukkit/event/player/PlayerEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerEvent.java
@@ -2,22 +2,24 @@ package org.bukkit.event.player;
 
 import org.bukkit.entity.Player;
 import org.bukkit.event.Event;
+import org.bukkit.event.entity.EntityEvent;
+import org.bukkit.event.world.LocalEvent;
 import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a player related event
  */
-public abstract class PlayerEvent extends Event {
+public abstract class PlayerEvent extends EntityEvent {
     protected Player player;
 
     public PlayerEvent(@NotNull final Player who) {
+        super(who);
         player = who;
     }
 
-    public PlayerEvent(@NotNull final Player who, boolean async) { // Paper - public
-        super(async);
+    public PlayerEvent(@NotNull final Player who, boolean async) {
+        super(who, async);
         player = who;
-
     }
 
     /**
diff --git a/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
index 04b3dce008edefb045162d0f69f87462ea1f3534..339faeaa87be54c3a30f28f8a14bd1948b3b7d59 100644
--- a/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
@@ -47,7 +47,7 @@ public class PlayerShearEntityEvent extends PlayerEvent implements Cancellable {
      * @return the entity the player is shearing
      */
     @NotNull
-    public Entity getEntity() {
+    public Entity getShearedEntity() {
         return what;
     }
 
diff --git a/src/main/java/org/bukkit/event/world/LocalEvent.java b/src/main/java/org/bukkit/event/world/LocalEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..cf534fa9618b536c6a7602d2e5206b15dd5c7c9c
--- /dev/null
+++ b/src/main/java/org/bukkit/event/world/LocalEvent.java
@@ -0,0 +1,22 @@
+package org.bukkit.event.world;
+
+import org.bukkit.Location;
+import org.jetbrains.annotations.NotNull;
+
+public abstract class LocalEvent extends WorldEvent {
+    private final Location location;
+
+    public LocalEvent(@NotNull Location location) {
+        super(location != null ? location.getWorld() : null);
+        this.location = location;
+    }
+
+    public LocalEvent(@NotNull Location location, boolean async) {
+        super(location.getWorld(), async);
+        this.location = location;
+    }
+
+    public @NotNull Location getLocation() {
+        return location;
+    }
+}
diff --git a/src/main/java/org/bukkit/plugin/RegisteredListener.java b/src/main/java/org/bukkit/plugin/RegisteredListener.java
index 3b3d9642a8d63798dc28f2f8df77f0466451cbff..92857714e92f619d54162f722924072f78dc5a98 100644
--- a/src/main/java/org/bukkit/plugin/RegisteredListener.java
+++ b/src/main/java/org/bukkit/plugin/RegisteredListener.java
@@ -67,6 +67,10 @@ public class RegisteredListener {
                 return;
             }
         }
+        execute(event);
+    }
+
+    protected void execute(@NotNull final Event event) throws EventException {
         executor.execute(listener, event);
     }
 
diff --git a/src/main/java/org/bukkit/plugin/SmartRegisteredListener.java b/src/main/java/org/bukkit/plugin/SmartRegisteredListener.java
new file mode 100644
index 0000000000000000000000000000000000000000..50e48e8be078bde13bde4b93040ee59e9759d3f9
--- /dev/null
+++ b/src/main/java/org/bukkit/plugin/SmartRegisteredListener.java
@@ -0,0 +1,31 @@
+package org.bukkit.plugin;
+
+import org.bukkit.event.Event;
+import org.bukkit.event.EventException;
+import org.bukkit.event.EventPriority;
+import org.bukkit.event.SmartListener;
+import org.jetbrains.annotations.NotNull;
+
+public class SmartRegisteredListener extends RegisteredListener {
+
+    private final SmartListener listener;
+
+    public SmartRegisteredListener(@NotNull SmartListener listener, @NotNull EventExecutor executor, @NotNull EventPriority priority, @NotNull Plugin plugin, boolean ignoreCancelled) {
+        super(listener, executor, priority, plugin, ignoreCancelled);
+
+        this.listener = listener;
+    }
+
+    @NotNull
+    @Override
+    public SmartListener getListener() {
+        return listener;
+    }
+
+    @Override
+    protected void execute(@NotNull Event event) throws EventException {
+        if(listener.shouldHandle(event)) {
+            super.execute(event);
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index 7e5149a21b6747f64425a277c142e69f0ef43b3f..920719459f107db0db9bb1bbe8032f247c793df8 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -28,6 +28,7 @@ import org.bukkit.event.Event;
 import org.bukkit.event.EventException;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
+import org.bukkit.event.SmartListener;
 import org.bukkit.event.server.PluginDisableEvent;
 import org.bukkit.event.server.PluginEnableEvent;
 import org.bukkit.plugin.AuthorNagException;
@@ -39,6 +40,7 @@ import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.plugin.PluginLoader;
 import org.bukkit.plugin.RegisteredListener;
 import org.bukkit.plugin.SimplePluginManager;
+import org.bukkit.plugin.SmartRegisteredListener;
 import org.bukkit.plugin.TimedRegisteredListener;
 import org.bukkit.plugin.UnknownDependencyException;
 import org.jetbrains.annotations.NotNull;
@@ -337,6 +339,8 @@ public final class JavaPluginLoader implements PluginLoader {
             EventExecutor executor = new co.aikar.timings.TimedEventExecutor(EventExecutor.create(method, eventClass), plugin, method, eventClass); // Paper // Paper (Yes.) - Use factory method `EventExecutor.create()`
             if (false) { // Spigot - RL handles useTimings check now
                 eventSet.add(new TimedRegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
+            } else if(listener instanceof SmartListener) {
+                eventSet.add(new SmartRegisteredListener((SmartListener) listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
             } else {
                 eventSet.add(new RegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
             }
diff --git a/src/test/java/org/bukkit/LocationTest.java b/src/test/java/org/bukkit/LocationTest.java
index 887305c05c3e53079347502c187984ca3e42a1f8..840c24befeefcd842237a95262032137e746b581 100644
--- a/src/test/java/org/bukkit/LocationTest.java
+++ b/src/test/java/org/bukkit/LocationTest.java
@@ -189,7 +189,7 @@ public class LocationTest {
         return new Vector(x, y, z);
     }
 
-    private static Location getEmptyLocation() {
+    public static Location getEmptyLocation() {
         return new Location(TestWorld.INSTANCE, 0, 0, 0);
     }
 
diff --git a/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java b/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
index 351fc4a9f45745984d1d4811ba836959a3f3eadb..7726c184e695b56f1ab62f0d3838af9531998381 100644
--- a/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
+++ b/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
@@ -10,6 +10,7 @@ import org.bukkit.event.block.BlockBreakEvent;
 import org.bukkit.event.player.PlayerEvent;
 import org.bukkit.event.player.PlayerInteractEvent;
 import org.bukkit.event.player.PlayerMoveEvent;
+import org.bukkit.plugin.messaging.TestPlayer;
 import org.junit.Test;
 
 public class TimedRegisteredListenerTest {
@@ -23,8 +24,8 @@ public class TimedRegisteredListenerTest {
         };
         TestPlugin plugin = new TestPlugin("Test");
 
-        PlayerInteractEvent interactEvent = new PlayerInteractEvent(null, null, null, null, null);
-        PlayerMoveEvent moveEvent = new PlayerMoveEvent(null, null, null);
+        PlayerInteractEvent interactEvent = new PlayerInteractEvent(TestPlayer.getInstance(), null, null, null, null);
+        PlayerMoveEvent moveEvent = new PlayerMoveEvent(TestPlayer.getInstance(), null, null);
         BlockBreakEvent breakEvent = new BlockBreakEvent(null, null);
 
         TimedRegisteredListener trl = new TimedRegisteredListener(listener, executor, EventPriority.NORMAL, plugin, false);
diff --git a/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java b/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
index 1b7642dc1c55c6bf87018b67d8c368478c0b9ca1..bb482578f2656839edae3cc0892f0c325275ade6 100644
--- a/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
+++ b/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
@@ -5,6 +5,8 @@ import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 import java.util.HashMap;
+
+import org.bukkit.LocationTest;
 import org.bukkit.entity.Player;
 
 
@@ -24,6 +26,7 @@ public final class TestPlayer implements InvocationHandler {
                 });
             */
             constructor = Proxy.getProxyClass(Player.class.getClassLoader(), Player.class).asSubclass(Player.class).getConstructor(InvocationHandler.class);
+            methods.put(Player.class.getMethod("getLocation"), (server, args) -> LocationTest.getEmptyLocation());
         } catch (Throwable t) {
             throw new Error(t);
         }
